<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/PokeMin/Pages/PokemonGame.razor">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PokeMin/Pages/PokemonGame.razor" />
              <option name="originalContent" value="@page &quot;/pokemongame&quot;&#10;@using PokeMin.Models&#10;@inject HttpClient Http&#10;@inject IJSRuntime JS&#10;&#10;@if (pokemonList.Count == 0)&#10;{&#10;    &lt;p&gt;Indlæser Pokémoner...&lt;/p&gt;&#10;}&#10;else&#10;{&#10;    &lt;div class=&quot;game-container&quot;&gt;&#10;        &lt;h3 class=&quot;game-title&quot;&gt;Gæt Pokémonen!&lt;/h3&gt;&#10;&#10;        &lt;div class=&quot;game-stats&quot;&gt;&#10;            &lt;span&gt;Progress: @totalAttempts / @pokemonList.Count&lt;/span&gt;&#10;            &lt;span&gt;Score: @score&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;pokemon-image-wrapper&quot;&gt;&#10;            &lt;PokemonImage Url=&quot;@pokemonList[currentIndex].Url&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;p&gt;Hvem er det?&lt;/p&gt;&#10;&#10;        &lt;div class=&quot;answer-options&quot;&gt;&#10;            &lt;button class=&quot;btn-answer&quot; @onclick=&quot;() =&gt; CheckAnswer(correctName)&quot; disabled=&quot;@(isCorrect != null)&quot;&gt;@correctName&lt;/button&gt;&#10;            &lt;button class=&quot;btn-answer&quot; @onclick=&quot;() =&gt; CheckAnswer(wrongName)&quot; disabled=&quot;@(isCorrect != null)&quot;&gt;@wrongName&lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        @if (isCorrect != null)&#10;        {&#10;            &lt;p class=&quot;result-message @(isCorrect == true ? &quot;correct&quot; : &quot;incorrect&quot;)&quot;&gt;&#10;                @(isCorrect == true ? &quot;✅ Rigtigt!&quot; : &quot;❌ Forkert!&quot;)&#10;            &lt;/p&gt;&#10;            &lt;button class=&quot;btn-next&quot; @onclick=&quot;NextPokemon&quot;&gt;Næste&lt;/button&gt;&#10;        }&#10;    &lt;/div&gt;&#10;}&#10;&#10;@code {&#10;    private string correctName;&#10;    private string wrongName;&#10;    private string userAnswer;&#10;    private bool? isCorrect;&#10;    private int score = 0;&#10;    private int totalAttempts = 0;&#10;&#10;    private List&lt;PokemonListItem&gt; pokemonList = new();&#10;    private int currentIndex = 0;&#10;&#10;    protected override async Task OnInitializedAsync()&#10;    {&#10;        // Загружаем список покемонов (например, 6 штук)&#10;        var response = await Http.GetFromJsonAsync&lt;PokemonListResponse&gt;(&#10;            &quot;https://pokeapi.co/api/v2/pokemon?limit=6&quot;);&#10;&#10;        pokemonList = response?.Results ?? new List&lt;PokemonListItem&gt;();&#10;        await GenerateQuestion();&#10;        &#10;        // Воспроизводим звук при загрузке игры&#10;        await JS.InvokeVoidAsync(&quot;gameAudio.playGameStartSound&quot;);&#10;    }&#10;&#10;    // Класс для элементов списка покемонов&#10;    public class PokemonListItem&#10;    {&#10;        public string Name { get; set; }&#10;        public string Url { get; set; }&#10;    }&#10;&#10;    // Класс для отв��та API со списком покемонов&#10;    public class PokemonListResponse&#10;    {&#10;        public List&lt;PokemonListItem&gt; Results { get; set; }&#10;    }&#10;&#10;    private async Task GenerateQuestion()&#10;    {&#10;        var correctPokemon = pokemonList[currentIndex];&#10;        correctName = correctPokemon.Name;&#10;&#10;        var random = new Random();&#10;        string wrong;&#10;        do&#10;        {&#10;            var randomIndex = random.Next(0, pokemonList.Count);&#10;            wrong = pokemonList[randomIndex].Name;&#10;        } while (wrong == correctName);&#10;&#10;        wrongName = wrong;&#10;        isCorrect = null;&#10;        userAnswer = null;&#10;    }&#10;&#10;    private async Task CheckAnswer(string answer)&#10;    {&#10;        if (isCorrect != null)&#10;            return; // уже ответил, не даём нажать ещё раз&#10;&#10;        // Воспроизводим звук клика при нажатии на кнопку&#10;        await JS.InvokeVoidAsync(&quot;gameAudio.playClickSound&quot;);&#10;&#10;        userAnswer = answer;&#10;        isCorrect = (answer == correctName);&#10;        totalAttempts++;&#10;&#10;        if (isCorrect == true)&#10;        {&#10;            score++;&#10;            // Воспроизводим звук правильного ответа&#10;            await JS.InvokeVoidAsync(&quot;gameAudio.playCorrectSound&quot;);&#10;        }&#10;        else&#10;        {&#10;            // Воспроизводим звук неправильного ответа&#10;            await JS.InvokeVoidAsync(&quot;gameAudio.playIncorrectSound&quot;);&#10;        }&#10;    }&#10;&#10;    private async Task NextPokemon()&#10;    {&#10;        // Воспроизводим звук перехода к следующему вопросу&#10;        await JS.InvokeVoidAsync(&quot;gameAudio.playNextSound&quot;);&#10;        &#10;        currentIndex++;&#10;&#10;        if (currentIndex &gt;= pokemonList.Count)&#10;        {&#10;            // Все покемоны закончились&#10;            currentIndex = 0;&#10;            totalAttempts = 0;&#10;            score = 0;&#10;        }&#10;&#10;        await GenerateQuestion();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="@page &quot;/pokemongame&quot;&#10;@using PokeMin.Models&#10;@inject HttpClient Http&#10;@inject IJSRuntime JS&#10;&#10;@if (pokemonList.Count == 0)&#10;{&#10;    &lt;p&gt;Indlæser Pokémoner...&lt;/p&gt;&#10;}&#10;else&#10;{&#10;    &lt;div class=&quot;game-container&quot;&gt;&#10;        &lt;h3 class=&quot;game-title&quot;&gt;Gæt Pokémonen!&lt;/h3&gt;&#10;&#10;        &lt;div class=&quot;game-stats&quot;&gt;&#10;            &lt;span&gt;Progress: @totalAttempts / @pokemonList.Count&lt;/span&gt;&#10;            &lt;span&gt;Score: @score&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;pokemon-image-wrapper&quot;&gt;&#10;            &lt;PokemonImage Url=&quot;@pokemonList[currentIndex].Url&quot; /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;p&gt;Hvem er det?&lt;/p&gt;&#10;&#10;        &lt;div class=&quot;answer-options&quot;&gt;&#10;            &lt;button class=&quot;btn-answer&quot; @onclick=&quot;() =&gt; CheckAnswer(correctName)&quot; disabled=&quot;@(isCorrect != null)&quot;&gt;@correctName&lt;/button&gt;&#10;            &lt;button class=&quot;btn-answer&quot; @onclick=&quot;() =&gt; CheckAnswer(wrongName)&quot; disabled=&quot;@(isCorrect != null)&quot;&gt;@wrongName&lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        @if (isCorrect != null)&#10;        {&#10;            &lt;p class=&quot;result-message @(isCorrect == true ? &quot;correct&quot; : &quot;incorrect&quot;)&quot;&gt;&#10;                @(isCorrect == true ? &quot;✅ Rigtigt!&quot; : &quot;❌ Forkert!&quot;)&#10;            &lt;/p&gt;&#10;            &lt;button class=&quot;btn-next&quot; @onclick=&quot;NextPokemon&quot;&gt;Næste&lt;/button&gt;&#10;        }&#10;    &lt;/div&gt;&#10;}&#10;&#10;@code {&#10;    private string correctName;&#10;    private string wrongName;&#10;    private string userAnswer;&#10;    private bool? isCorrect;&#10;    private int score = 0;&#10;    private int totalAttempts = 0;&#10;&#10;    private List&lt;PokemonListItem&gt; pokemonList = new();&#10;    private int currentIndex = 0;&#10;&#10;    protected override async Task OnInitializedAsync()&#10;    {&#10;        // Загружаем список покемонов (например, 6 штук)&#10;        var response = await Http.GetFromJsonAsync&lt;PokemonListResponse&gt;(&#10;            &quot;https://pokeapi.co/api/v2/pokemon?limit=6&quot;);&#10;&#10;        pokemonList = response?.Results ?? new List&lt;PokemonListItem&gt;();&#10;        await GenerateQuestion();&#10;        &#10;        // Убираем автовоспроизведение при загрузке - будет воспроизводиться после первого клика&#10;    }&#10;&#10;    // Класс для элементов списка покемонов&#10;    public class PokemonListItem&#10;    {&#10;        public string Name { get; set; }&#10;        public string Url { get; set; }&#10;    }&#10;&#10;    // Класс для отв��та API со списком покемонов&#10;    public class PokemonListResponse&#10;    {&#10;        public List&lt;PokemonListItem&gt; Results { get; set; }&#10;    }&#10;&#10;    private async Task GenerateQuestion()&#10;    {&#10;        var correctPokemon = pokemonList[currentIndex];&#10;        correctName = correctPokemon.Name;&#10;&#10;        var random = new Random();&#10;        string wrong;&#10;        do&#10;        {&#10;            var randomIndex = random.Next(0, pokemonList.Count);&#10;            wrong = pokemonList[randomIndex].Name;&#10;        } while (wrong == correctName);&#10;&#10;        wrongName = wrong;&#10;        isCorrect = null;&#10;        userAnswer = null;&#10;    }&#10;&#10;    private async Task CheckAnswer(string answer)&#10;    {&#10;        if (isCorrect != null)&#10;            return; // уже ответил, не даём нажать ещё раз&#10;&#10;        // Воспроизводим звук клика при нажатии на кнопку&#10;        await JS.InvokeVoidAsync(&quot;gameAudio.playClickSound&quot;);&#10;&#10;        userAnswer = answer;&#10;        isCorrect = (answer == correctName);&#10;        totalAttempts++;&#10;&#10;        if (isCorrect == true)&#10;        {&#10;            score++;&#10;            // Воспроизводим звук правильного ответа&#10;            await JS.InvokeVoidAsync(&quot;gameAudio.playCorrectSound&quot;);&#10;        }&#10;        else&#10;        {&#10;            // Воспроизводим звук неправильного ответа&#10;            await JS.InvokeVoidAsync(&quot;gameAudio.playIncorrectSound&quot;);&#10;        }&#10;    }&#10;&#10;    private async Task NextPokemon()&#10;    {&#10;        // Воспроизводим звук перехода к следующему вопросу&#10;        await JS.InvokeVoidAsync(&quot;gameAudio.playNextSound&quot;);&#10;        &#10;        currentIndex++;&#10;&#10;        if (currentIndex &gt;= pokemonList.Count)&#10;        {&#10;            // Все покемоны закончились&#10;            currentIndex = 0;&#10;            totalAttempts = 0;&#10;            score = 0;&#10;        }&#10;&#10;        await GenerateQuestion();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PokeMin/Pages/PokemonGame.razor.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PokeMin/Pages/PokemonGame.razor.css" />
              <option name="originalContent" value=".game-container {&#10;    max-width: 450px; /* Немного увеличим контейнер */&#10;    margin: 2rem auto;&#10;    padding: 2rem;&#10;    background: linear-gradient(135deg, #fce4ec, #e0f7fa); /* Розово-циановый градиент */&#10;    border-radius: 20px; /* Более скругленные углы */&#10;    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);&#10;    text-align: center;&#10;    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif; /* Более &quot;милый&quot; шрифт */&#10;    border: 2px solid #fff;&#10;}&#10;&#10;.game-title {&#10;    color: #ad1457; /* Темно-розовый */&#10;    margin-bottom: 1.5rem;&#10;    font-weight: bold;&#10;}&#10;&#10;.game-stats {&#10;    display: flex;&#10;    justify-content: space-around;&#10;    margin-bottom: 1.5rem;&#10;    color: #00796b; /* Темно-циановый */&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.pokemon-image-wrapper {&#10;    background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */&#10;    border-radius: 100px;&#10;    padding: 1.5rem;&#10;    margin-bottom: 1.5rem;&#10;    height: 300px; /* Увеличиваем высоту контейнера */&#10;    width: 300px; /* Добавляем фиксированную ширину */&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    border: 2px dashed #ff80ab; /* Розовая пунктирная рамка */&#10;}&#10;&#10;/* картинку внутри обертки */&#10;.pokemon-image-wrapper ::deep img {&#10;    max-height: 250px; /* Увеличиваем максимальную высоту изображения */&#10;    max-width: 250px; /* Добавляем максимальную ширину */&#10;    width: auto;&#10;    height: auto;&#10;    object-fit: contain; /* Сохраняем пропорции изображения */&#10;}&#10;&#10;&#10;.answer-options {&#10;    display: grid;&#10;    grid-template-columns: 1fr 1fr;&#10;    gap: 1rem;&#10;    margin-top: 1.5rem;&#10;}&#10;&#10;.btn-answer {&#10;    padding: 0.75rem;&#10;    border: 2px solid #80deea; /* Циановая рамка */&#10;    border-radius: 12px; /* Более скругленные кнопки */&#10;    background-color: #fff;&#10;    color: #006064; /* Темный циан */&#10;    font-size: 1.1rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    transition: all 0.2s ease-in-out;&#10;}&#10;&#10;.btn-answer:hover {&#10;    background-color: #e0f7fa; /* Светло-циановый */&#10;    transform: translateY(-2px); /* Небольшой эффект приподнятия */&#10;}&#10;&#10;.btn-answer:disabled {&#10;    cursor: not-allowed;&#10;    opacity: 0.7;&#10;}&#10;&#10;.result-message {&#10;    margin-top: 1.5rem;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;}&#10;&#10;.result-message.correct {&#10;    color: #2e7d32; /* Более темный зеленый */&#10;}&#10;&#10;.result-message.incorrect {&#10;    color: #c62828; /* Более темный красный */&#10;}&#10;&#10;.btn-next {&#10;    margin-top: 1rem;&#10;    padding: 0.75rem 1.5rem;&#10;    border: none;&#10;    border-radius: 12px;&#10;    background: linear-gradient(45deg, #ff80ab, #80deea); /* Розово-циановый градиент для кнопки */&#10;    color: white;&#10;    font-size: 1.1rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease-in-out;&#10;    box-shadow: 0 2px 5px rgba(0,0,0,0.1);&#10;}&#10;&#10;.btn-next:hover {&#10;    transform: scale(1.05);&#10;    box-shadow: 0 4px 10px rgba(0,0,0,0.15);&#10;}&#10;" />
              <option name="updatedContent" value=".game-container {&#10;    max-width: 450px; /* Немного увеличим контейнер */&#10;    margin: 2rem auto;&#10;    padding: 2rem;&#10;    background: linear-gradient(135deg, #fce4ec, #e0f7fa); /* Розово-циановый градиент */&#10;    border-radius: 20px; /* Более скругленные углы */&#10;    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);&#10;    text-align: center;&#10;    font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif; /* Более &quot;милый&quot; шрифт */&#10;    border: 2px solid #fff;&#10;}&#10;&#10;.game-title {&#10;    color: #ad1457; /* Темно-розовый */&#10;    margin-bottom: 1.5rem;&#10;    font-weight: bold;&#10;}&#10;&#10;.game-stats {&#10;    display: flex;&#10;    justify-content: space-around;&#10;    margin-bottom: 1.5rem;&#10;    color: #00796b; /* Темно-циановый */&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.pokemon-image-wrapper {&#10;    background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */&#10;    border-radius: 100px;&#10;    padding: 1.5rem;&#10;    margin-bottom: 1.5rem;&#10;    height: 300px; /* Увеличиваем высоту контейнера */&#10;    width: 300px; /* Добавляем фиксированную ширину */&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    border: 2px dashed #ff80ab; /* Розовая пунктирная рамка */&#10;}&#10;&#10;/* картинку внутри обертки */&#10;.pokemon-image-wrapper ::deep img {&#10;    width: 200px !important; /* Принудительно устанавливаем ширину */&#10;    height: 200px !important; /* Принудительно устанавливаем высоту */&#10;    image-rendering: pixelated; /* Сохраняем четкость пикселей при увеличении */&#10;    image-rendering: -moz-crisp-edges; /* Для Firefox */&#10;    image-rendering: crisp-edges; /* Для других браузеров */&#10;    object-fit: contain; /* Сохраняем пропорции изображения */&#10;    filter: none; /* Убираем любые фильтры */&#10;}&#10;&#10;&#10;.answer-options {&#10;    display: grid;&#10;    grid-template-columns: 1fr 1fr;&#10;    gap: 1rem;&#10;    margin-top: 1.5rem;&#10;}&#10;&#10;.btn-answer {&#10;    padding: 0.75rem;&#10;    border: 2px solid #80deea; /* Циановая рамка */&#10;    border-radius: 12px; /* Более скругленные кнопки */&#10;    background-color: #fff;&#10;    color: #006064; /* Темный циан */&#10;    font-size: 1.1rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    transition: all 0.2s ease-in-out;&#10;}&#10;&#10;.btn-answer:hover {&#10;    background-color: #e0f7fa; /* Светло-циановый */&#10;    transform: translateY(-2px); /* Небольшой эффект приподнятия */&#10;}&#10;&#10;.btn-answer:disabled {&#10;    cursor: not-allowed;&#10;    opacity: 0.7;&#10;}&#10;&#10;.result-message {&#10;    margin-top: 1.5rem;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;}&#10;&#10;.result-message.correct {&#10;    color: #2e7d32; /* Более темный зеленый */&#10;}&#10;&#10;.result-message.incorrect {&#10;    color: #c62828; /* Более темный красный */&#10;}&#10;&#10;.btn-next {&#10;    margin-top: 1rem;&#10;    padding: 0.75rem 1.5rem;&#10;    border: none;&#10;    border-radius: 12px;&#10;    background: linear-gradient(45deg, #ff80ab, #80deea); /* Розово-циановый градиент для кнопки */&#10;    color: white;&#10;    font-size: 1.1rem;&#10;    font-weight: bold;&#10;    cursor: pointer;&#10;    transition: all 0.3s ease-in-out;&#10;    box-shadow: 0 2px 5px rgba(0,0,0,0.1);&#10;}&#10;&#10;.btn-next:hover {&#10;    transform: scale(1.05);&#10;    box-shadow: 0 4px 10px rgba(0,0,0,0.15);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PokeMin/wwwroot/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PokeMin/wwwroot/index.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;PokeMin&lt;/title&gt;&#10;    &lt;base href=&quot;/&quot; /&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;lib/bootstrap/dist/css/bootstrap.min.css&quot; /&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/app.css&quot; /&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;favicon.png&quot; /&gt;&#10;    &lt;link href=&quot;PokeMin.styles.css&quot; rel=&quot;stylesheet&quot; /&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;svg class=&quot;loading-progress&quot;&gt;&#10;            &lt;circle r=&quot;40%&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; /&gt;&#10;            &lt;circle r=&quot;40%&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; /&gt;&#10;        &lt;/svg&gt;&#10;        &lt;div class=&quot;loading-progress-text&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div id=&quot;blazor-error-ui&quot;&gt;&#10;        An unhandled error has occurred.&#10;        &lt;a href=&quot;.&quot; class=&quot;reload&quot;&gt;Reload&lt;/a&gt;&#10;        &lt;span class=&quot;dismiss&quot;&gt;&lt;/span&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;_framework/blazor.webassembly.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        // Функции для работы со звуками в игре&#10;        window.gameAudio = {&#10;            userInteracted: false,&#10;            welcomeSoundPlayed: false,&#10;            &#10;            // Инициализируем при первом взаимодействии&#10;            init: function() {&#10;                if (!this.userInteracted) {&#10;                    this.userInteracted = true;&#10;                    console.log('User interaction detected, audio enabled');&#10;                    // Воспроизводим приветственный звук при первом взаимодействии&#10;                    if (!this.welcomeSoundPlayed) {&#10;                        this.playWelcomeSound();&#10;                        this.welcomeSoundPlayed = true;&#10;                    }&#10;                }&#10;            },&#10;            &#10;            // Звук &quot;Who's that Pokemon&quot; при загрузке игры&#10;            playWelcomeSound: function() {&#10;                console.log('Playing welcome sound...');&#10;                // Исправленная ссылка на ваш Dropbox файл&#10;                const pokemonIntroUrl = 'https://www.dropbox.com/scl/fi/cwgx4ale4ieq7ljb99e4r/whosthatpokemon.wav?rlkey=92zsnopf8u5dn31qsc064r0sr&amp;st=aurvkutx&amp;dl=1';&#10;                &#10;                const audio = new Audio(pokemonIntroUrl);&#10;                audio.volume = 0.5;&#10;                audio.play().catch(e =&gt; {&#10;                    console.log('Could not play welcome sound:', e.message);&#10;                    // Fallback к простому приветственному звуку&#10;                    this.playSound('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJmutqt4AGnqo5YvnVMiNpvn3n8yc6PaVi0fFq/fS1JgJ0rZZqhvl6ZGLfWWPKx6GG/m7qxSNwxzXHkGXm3dXfZwYDSq3FY7ClZh4lJNn8+gXTkMZXvgmm5T2HLfPvk2XrHaJdR+g8Zw1Wk+XV7b6qtmfp9QV6v96z8cjm0eKD4=', 0.4);&#10;                });&#10;            },&#10;            &#10;            // Воспроизведение звука с проверкой взаимодействия&#10;            playSound: function(url, volume = 0.3) {&#10;                this.init();&#10;                const audio = new Audio(url);&#10;                audio.volume = volume;&#10;                audio.play().catch(e =&gt; {&#10;                    console.log('Could not play sound:', e.message);&#10;                });&#10;            },&#10;            &#10;            // Звук при загрузке страницы игры (теперь воспроизводит приветственный звук)&#10;            playGameStartSound: function() {&#10;                this.playWelcomeSound();&#10;            },&#10;            &#10;            // Звук при правильном ответе (успех)&#10;            playCorrectSound: function() {&#10;                // Радостный звук - высокий тон&#10;                this.playSound('data:audio/wav;base64,UklGRi4EAABXQVZFZm10IBAAAAABAAEAESsAABErAAABAAgAZGF0YQoEAACbdyuq4Z7v7b/+8O7m5+Hp6eXn4+Pj4ODg3t7d3NvZ2djX1tXU09LS0M/Ozs3My8vKycjIx8bGxcXExMPDwsLBwcDAwL+/vr69vby8u7u6urm5uLi3t7a2tbW0tLS0s7KysrGxsLCwsK+vr66urq2tra2srKyrq6urqqqqqqmqqamqqamoqKioqKenp6enp6empqampqWlpaWlpKSkpKSko6OjpKOjo6Ojo6OjpKOjo6OjpKSjpKSkpKSkpaWlpaWmpqampqampqenp6enqKioqKioqamqqqmqqquqq6qrq6usr6ytra2urq+vsLCwsLGysrKzs7O0tLS1tbW2tra3t7e4uLi5ubm6urq7u7u8vLy9vb6+vr/Av8DBwcLCwsPDxMTFxcbGx8fIyMnJysrLy8zMzc3Ozs/P0NDR0dLS09PU1NXV1tbX19jY2dna2tvb3N3d3t7f3+Dg4eLi4+Pk5OXl5ubn5+jo6enq6uvr7Ozt7e7u7+/w8PHx8vLz8/T09PX19vb29/f4+Pj5+fr6+vv7/Pz8/f3+/v7+////////////', 0.4);&#10;            },&#10;            &#10;            // Звук при неправильном ответе (ошибка)&#10;            playIncorrectSound: function() {&#10;                // Грустный звук - низкий тон&#10;                this.playSound('data:audio/wav;base64,UklGRnIAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YU4AAAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgAuLi4ALi4uAC4uLgA', 0.4);&#10;            },&#10;            &#10;            // Звук при переходе к следующему вопросу&#10;            playNextSound: function() {&#10;                // Нейтральный переходный звук&#10;                this.playSound('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJmutqt4AGnqo5YvnVMiNpvn3n8yc6PaVi0fFq/fS1JgJ0rZZqhvl6ZGLfWWPKx6GG/m7qxSNwxzXHkGXm3dXfZwYDSq3FY7ClZh4lJNn8+gXTkMZXvgmm5T2HLfPvk2XrHaJdR+g8Zw1Wk+XV7b6qtmfp9QV6v96z8cjm0eKD4=', 0.3);&#10;            },&#10;            &#10;            // Звук нажатия на кнопку (клик)&#10;            playClickSound: function() {&#10;                // Короткий клик&#10;                this.playSound('data:audio/wav;base64,UklGRpQAAABXQVZFZm10IBAAAAABAAEAESsAABErAAABAAgAZGF0YXAAAACgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg', 0.2);&#10;            }&#10;        };&#10;        &#10;        // Добавляем слушатель для первого взаимодействия пользователя&#10;        document.addEventListener('click', () =&gt; window.gameAudio.init(), { once: true });&#10;        document.addEventListener('keydown', () =&gt; window.gameAudio.init(), { once: true });&#10;        document.addEventListener('touchstart', () =&gt; window.gameAudio.init(), { once: true });&#10;    &lt;/script&gt;&#10;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>