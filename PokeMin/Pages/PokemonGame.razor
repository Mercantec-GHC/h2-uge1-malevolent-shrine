@page "/pokemongame"
@using PokeMin.Models
@inject HttpClient Http
@inject IJSRuntime JS

@if (pokemonList.Count == 0)
{
    <p>Indl√¶ser Pok√©moner...</p>
}
else if (gameCompleted)
{
    // Result screen
    <div class="game-container results-screen">
        <h2 class="results-title">üéâ Finish!</h2>
        <div class="final-score">
            <p>Result:</p>
            <h3>@score –∏–∑ @pokemonList.Count</h3>
            <p class="percentage">(@((score * 100 / pokemonList.Count))% Rigtie svar</p>
        </div>
        <button class="btn-restart" @onclick="RestartGame">üîÑ Start fra Begyndelse </button>
    </div>
}
else
{
    <div class="game-container">
        <h3 class="game-title">G√¶t Pok√©monen!</h3>

        <div class="game-stats">
            <span>Progress: @totalAttempts / @pokemonList.Count</span>
            <span>Score: @score</span>
        </div>

        <div class="pokemon-image-wrapper">
            <PokemonImage Url="@pokemonList[currentIndex].Url" />
        </div>

        <p>Hvem er det?</p>

        <div class="answer-options">
            <button class="btn-answer" @onclick="() => CheckAnswer(correctName)" disabled="@(isCorrect != null)">@correctName</button>
            <button class="btn-answer" @onclick="() => CheckAnswer(wrongName)" disabled="@(isCorrect != null)">@wrongName</button>
        </div>

        @if (isCorrect != null)
        {
            <p class="result-message @(isCorrect == true ? "correct" : "incorrect")">
                @(isCorrect == true ? "‚úÖ Rigtigt!" : "‚ùå Forkert!")
            </p>
            <button class="btn-next" @onclick="NextPokemon">N√¶ste</button>
        }
    </div>
}

@code {
    private string correctName;
    private string wrongName;
    private string userAnswer;
    private bool? isCorrect;
    private int score = 0;
    private int totalAttempts = 0;
    private bool gameCompleted = false;

    private List<PokemonListItem> pokemonList = new();
    private int currentIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫–µ–º–æ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6 —à—Ç—É–∫)
        var response = await Http.GetFromJsonAsync<PokemonListResponse>(
            "https://pokeapi.co/api/v2/pokemon?limit=6");

        pokemonList = response?.Results ?? new List<PokemonListItem>();
        await GenerateQuestion();
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ - –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
    }

    // –ö–ª–∞—Å—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –ø–æ–∫–µ–º–æ–Ω–æ–≤
    public class PokemonListItem
    {
        public string Name { get; set; }
        public string Url { get; set; }
    }

    // class for API with list of pokemons
    public class PokemonListResponse
    {
        public List<PokemonListItem> Results { get; set; }
    }

    private async Task GenerateQuestion()
    {
        var correctPokemon = pokemonList[currentIndex];
        correctName = correctPokemon.Name;

        var random = new Random();
        string wrong;
        do
        {
            var randomIndex = random.Next(0, pokemonList.Count);
            wrong = pokemonList[randomIndex].Name;
        } while (wrong == correctName);

        wrongName = wrong;
        isCorrect = null;
        userAnswer = null;
    }

    private async Task CheckAnswer(string answer)
    {
        if (isCorrect != null)
            return; // doesn't allow to click twice

        // play audio on click
        await JS.InvokeVoidAsync("gameAudio.playClickSound");

        userAnswer = answer;
        isCorrect = (answer == correctName);
        totalAttempts++;

        if (isCorrect == true)
        {
            score++;
            // play audio for correct answer
            await JS.InvokeVoidAsync("gameAudio.playCorrectSound");
        }
        else
        {
            // playaudio for incorrect answer
            await JS.InvokeVoidAsync("gameAudio.playIncorrectSound");
        }
    }

    private async Task NextPokemon()
    {
        // play audio for next question
        await JS.InvokeVoidAsync("gameAudio.playNextSound");
        
        currentIndex++;

        if (currentIndex >= pokemonList.Count)
        {
            // show result screen
            gameCompleted = true;
            // play audio for finishing game
            await JS.InvokeVoidAsync("gameAudio.playGameEndSound");
            return; // Important! Quit method without calling GenerateQuestion()
        }

        await GenerateQuestion();
    }
    
    private async Task RestartGame()
    {
        // play audio for restart
        await JS.InvokeVoidAsync("gameAudio.playRestartSound");
    
        // reset all variables
        gameCompleted = false;
        currentIndex = 0;
        totalAttempts = 0;
        score = 0;
    
        // generate new question
        await GenerateQuestion();
    }
}
