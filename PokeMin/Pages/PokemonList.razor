@page "/pokemon"
@using System.Net.Http
@using System.Net.Http.Json
@inject APIService API

<div class="main-wrapper">
        @if (pokemonList == null)
        {
            <p>Henter data...</p>
        }
        else
        {
            <div class="pokemon-grid">
                @foreach (var pokemon in pokemonList.Take(12))
                {
                    <div class="pokemon-card">
                        <img src="@pokemon.ImageUrl" alt="@pokemon.Name" />
                        <p>
                            <a href="/pokemon-details?IdOrName=@GetPokemonId(pokemon.Name)">
                                @Capitalize(pokemon.Name)
                            </a>
                        </p>
                    </div>
                }
            </div>

            <div class="pagination">
                <button @onclick="PrevPage" disabled="@(CurrentPage == 0)">← Forrige</button>
                <span>Side: @(CurrentPage + 1)</span>
                <button @onclick="NextPage">Næste →</button>
            </div>
        }
</div>

@code {
    private List<PokemonCard> pokemonList;
    private int CurrentPage = 0;
    private const int PageSize = 12;

    private string GetPokemonId(string url)
    {
        var parts = url.TrimEnd('/').Split('/');
        return parts.Last();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        int offset = CurrentPage * PageSize;
        pokemonList = await API.GetAllPokemons(offset, PageSize);
    }

    private async Task NextPage()
    {
        CurrentPage++;
        await LoadPage();
    }

    private async Task PrevPage()
    {
        if(CurrentPage > 0)
        {
            CurrentPage--;
            await LoadPage();
        }
    }

    private int GetIdFromUrl(string url)
    {
        var parts = url.TrimEnd('/').Split('/');
        return int.Parse(parts[^1]);
    }
    
    private string Capitalize(string input)
    {
        if (string.IsNullOrEmpty(input)) return input;
        return char.ToUpper(input[0]) + input[1..];
    }
} 